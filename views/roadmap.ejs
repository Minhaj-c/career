<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Weekly Career Roadmap</title>
    <style>
      .week-container {
        border: 1px solid #ccc;
        margin: 20px 0;
        padding: 20px;
        border-radius: 8px;
      }
      .week-locked {
        opacity: 0.5;
        pointer-events: none;
      }
      .week-completed {
        border-color: #4caf50;
      }
      .start-quiz-btn {
        background-color: #007bff;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
      }
      .start-quiz-btn:hover {
        background-color: #0056b3;
      }
      .quiz-container {
        display: none;
        margin-top: 20px;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      .quiz-result {
        display: none;
        margin-top: 20px;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 8px;
      }
      .quiz-result.pass {
        border-color: #4caf50;
        background-color: #e8f5e9;
      }
      .quiz-result.fail {
        border-color: #f44336;
        background-color: #ffebee;
      }
      .quiz-question {
        margin-bottom: 20px;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 8px;
      }
      .quiz-options {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-top: 10px;
      }
      .quiz-option {
        padding: 12px;
        border: 1px solid #ccc;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease;
      }
      .quiz-option:hover {
        background-color: #f0f0f0;
      }
      .quiz-option.selected {
        background-color: #007bff;
        color: white;
        border-color: #0056b3;
      }

      /* Style for the "Go Back to Home" button */
      .go-home-btn {
        background-color: #6c757d; /* Gray color */
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 10px;
      }
      .go-home-btn:hover {
        background-color: #5a6268; /* Darker gray on hover */
      }
      .drop-out-btn {
        background-color: #dc3545; /* Red color */
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 10px;
      }
      .drop-out-btn:hover {
        background-color: #c82333; /* Darker red on hover */
      }
      .quiz-active #goalSettingSection {
        display: none;
      }


      
    </style>
  </head>
  <body>
    <!-- Make weeks data available to client JS -->
    <script>
      const weeks = <%- JSON.stringify(weeks) %>;
    </script>

    <header>
      
      <h1>Your Weekly Career Roadmap - <%= roadmap.job %></h1>
      <p>
        Welcome <%= username %>! Follow this structured learning path to achieve
        your career goals.
      </p>
      <div id="goalSettingSection" style="margin: 20px 0; padding: 20px; border: 1px solid #ccc; border-radius: 8px;">
        <h2>Learning Goal Setting</h2>
        <div id="currentGoal" style="display: none;">
          <h3>Your Current Goal</h3>
          <p>Target completion: <span id="targetMonths"></span> months</p>
          <p>Required study time: <span id="requiredHours"></span> hours per week</p>
          <p>Progress: <span id="progressPercent"></span>%</p>
          <div class="progress-bar" style="background: #eee; height: 20px; border-radius: 10px; margin: 10px 0;">
            <div id="progressBar" style="background: #4CAF50; height: 100%; border-radius: 10px; width: 0%; transition: width 0.5s;"></div>
          </div>
        </div>
        
        <div id="setGoalForm">
          <p>Set your target completion time:</p>
          <select id="targetMonthsSelect" style="padding: 8px; margin-right: 10px;">
            <option value="3">3 months</option>
            <option value="6">6 months</option>
            <option value="9">9 months</option>
            <option value="12">12 months</option>
          </select>
          <button onclick="setGoal()" class="start-quiz-btn">Set Goal</button>
        </div>
      </div>
      
    </header>

    <main>
      <!-- Add hidden fields -->
      <input type="hidden" name="userId" value="<%= userId %>" />
      <input type="hidden" name="job" value="<%= roadmap.job %>" />
      
      <div id="weeklyContent">
        <% weeks.forEach((week, index) => { %>
        <div
          class="week-container <%= !user.unlockedWeeks.includes(index + 1) ? 'week-locked' : '' %> <%= user.completedWeeks.includes(index + 1) ? 'week-completed' : '' %>"
        >
          <h2>
            Week <%= index + 1 %>: <%= week.title %> <% if
            (!user.unlockedWeeks.includes(index + 1)) { %>
            <span class="lock-icon">ðŸ”’</span>
            <% } else if (user.completedWeeks.includes(index + 1)) { %>
            <span class="check-icon">âœ…</span>
            <% } %>
          </h2>
          <p><%= week.description %></p>
          <h3>Tasks:</h3>
          <ul>
            <% week.tasks.forEach(task => { %>
            <li><%= task %></li>
            <% }) %>
          </ul>
          
          <% if (user.unlockedWeeks.includes(index + 1) &&
          !user.completedWeeks.includes(index + 1)) { %>
          <button class="start-quiz-btn" data-week="<%= index + 1 %>">
            Take Week <%= index + 1 %> Quiz
          </button>
          <% } %>
        </div>
        <% }) %>
        <button onclick="dropOut()" class="drop-out-btn">Drop Out</button>
        <button
        onclick="window.location.href='/home/<%= userId %>'"
        class="go-home-btn"
      >
        Go Back to Home
      </button>
      </div>

      <div id="quizContainer" class="quiz-container">
        <h2 id="quizTitle"></h2>
        <div id="quizQuestions"></div>
        <button class="start-quiz-btn" onclick="submitQuiz()">
          Submit Quiz
        </button>
        <button class="start-quiz-btn" onclick="closeQuiz()">
            Return to Roadmap
          </button>

      </div>

      <div id="quizResult" class="quiz-result">
        <h3>Quiz Result</h3>
        <p id="scoreDisplay"></p>
        <p id="resultMessage"></p>
        <button class="start-quiz-btn" onclick="closeQuiz()">
          Return to Roadmap
        </button>
      </div>
      
      <!-- Add this section at the end of the <main> tag in roadmap.ejs -->
<% if (user.completedWeeks.length === totalWeeks) { %>
  <div id="congratulations" style="margin: 20px; padding: 20px; background-color: #e8f5e9; border: 1px solid #4CAF50; border-radius: 8px;">
    <h2>ðŸŽ‰ Congratulations! ðŸŽ‰</h2>
    <p>You have successfully completed all weeks in the roadmap for <strong><%= roadmap.job %></strong>.</p>
    <p>Keep up the great work and continue learning!</p>
  </div>
<% } %>
      
    </main>

    <script>
      let currentWeek = null;
      let selectedAnswers = {};

      document.addEventListener("DOMContentLoaded", function () {
        const buttons = document.querySelectorAll(".start-quiz-btn");

        buttons.forEach((button) => {
          button.addEventListener("click", function (e) {
            if (!this.dataset.week) return;
            e.preventDefault();
            const week = parseInt(this.dataset.week);
            currentWeek = week;
            startQuiz(week);
          });
        });
      });

     // First, let's fix the startQuiz function to properly handle click events
function startQuiz(week) {
  if (!weeks || !weeks[week - 1] || !weeks[week - 1].quiz) {
    console.error("Quiz data not found for week:", week);
    return;
  }

  const weeklyContent = document.getElementById("weeklyContent");
  const quizContainer = document.getElementById("quizContainer");
  const quizResult = document.getElementById("quizResult");

  // Reset quiz state
  selectedAnswers = {};

  document.body.classList.add("quiz-active");
  weeklyContent.style.display = "none";
  quizContainer.style.display = "block";
  quizResult.style.display = "none";

  const quiz = weeks[week - 1].quiz;
  document.getElementById("quizTitle").textContent = `Week ${week} Quiz`;

  // Randomly select 5 questions but SAVE them for later reference
  window.quizQuestions = quiz.questions
    .sort(() => 0.5 - Math.random()) // Shuffle the questions
    .slice(0, 5); // Select the first 5 questions

  // Clear and render new questions
  const questionsContainer = document.getElementById("quizQuestions");
  questionsContainer.innerHTML = window.quizQuestions
    .map(
      (q, index) => `
          <div class="quiz-question">
              <p><strong>Question ${index + 1}: ${q.question}</strong></p>
              <div class="quiz-options">
                  ${q.options
                    .map(
                      (opt, optIndex) => `
                      <div class="quiz-option" 
                           data-question="${index}"
                           data-option="${optIndex}">
                          ${opt}
                      </div>
                  `
                    )
                    .join("")}
              </div>
          </div>
      `
    )
    .join("");

  // Add event listeners to all option elements after they're in the DOM
  const optionElements = document.querySelectorAll('.quiz-option');
  optionElements.forEach(option => {
    option.addEventListener('click', function() {
      const questionIndex = this.getAttribute('data-question');
      const optionIndex = this.getAttribute('data-option');
      selectAnswer(parseInt(questionIndex), parseInt(optionIndex));
    });
  });
}

// Keep the selectAnswer function the same
function selectAnswer(questionIndex, optionIndex) {
  selectedAnswers[questionIndex] = optionIndex;

  // Update UI to show selection
  const options = document.querySelectorAll(
    `[data-question="${questionIndex}"]`
  );
  options.forEach((opt) => {
    opt.classList.remove("selected");
  });

  const selectedOption = document.querySelector(
    `[data-question="${questionIndex}"][data-option="${optionIndex}"]`
  );
  if (selectedOption) {
    selectedOption.classList.add("selected");
  }
}

// Keep the submitQuiz function as in the alternative solution
async function submitQuiz() {
  if (currentWeek === null || !weeks[currentWeek - 1].quiz || !window.quizQuestions) {
    console.error("Invalid quiz state");
    return;
  }

  let score = 0;
  const totalQuestions = window.quizQuestions.length;

  // Validate all questions are answered
  if (Object.keys(selectedAnswers).length < totalQuestions) {
    alert("Please answer all questions before submitting.");
    return;
  }

  // Calculate score using the SAVED questions
  for (let i = 0; i < window.quizQuestions.length; i++) {
    if (selectedAnswers[i] === window.quizQuestions[i].correctAnswer) {
      score++;
    }
  }

  const percentage = (score / totalQuestions) * 100;

  try {
    const response = await fetch("/api/progress/quiz", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        userId: document.querySelector('[name="userId"]').value,
        week: currentWeek,
        score: percentage,
        job: document.querySelector('[name="job"]').value,
      }),
    });

    if (!response.ok) {
      throw new Error("Failed to save quiz progress");
    }

    const result = await response.json();
    if (result.success) {
      displayQuizResult(percentage);

      // Check if all weeks are completed
      if (result.allWeeksCompleted) {
        const congratulationsDiv = document.createElement("div");
        congratulationsDiv.innerHTML = `
          <div style="margin: 20px; padding: 20px; background-color: #e8f5e9; border: 1px solid #4CAF50; border-radius: 8px;">
            <h2>ðŸŽ‰ Congratulations! ðŸŽ‰</h2>
            <p>You have successfully completed all weeks in the roadmap for <strong>${document.querySelector('[name="job"]').value}</strong>.</p>
            <p>Keep up the great work and continue learning!</p>
          </div>
        `;
        document.querySelector("main").appendChild(congratulationsDiv);
      }
    }
  } catch (error) {
    console.error("Error submitting quiz:", error);
    alert("Error saving quiz progress. Please try again.");
  }
}
      function displayQuizResult(score) {
        const quizContainer = document.getElementById("quizContainer");
        const resultDiv = document.getElementById("quizResult");

        quizContainer.style.display = "none";
        resultDiv.style.display = "block";

        document.getElementById(
          "scoreDisplay"
        ).textContent = `Score: ${score.toFixed(1)}%`;

        if (score >= 70) {
          resultDiv.classList.add("pass");
          resultDiv.classList.remove("fail");
          document.getElementById("resultMessage").textContent =
            "Congratulations! You've passed this week's quiz! The next week has been unlocked.";
        } else {
          resultDiv.classList.add("fail");
          resultDiv.classList.remove("pass");
          document.getElementById("resultMessage").textContent =
            "Please review the material and try again to unlock the next week.";
        }
      }

      function closeQuiz() {
        document.body.classList.remove("quiz-active");
        document.getElementById("quizContainer").style.display = "none";
        document.getElementById("quizResult").style.display = "none";
        document.getElementById("weeklyContent").style.display = "block";
        window.location.reload();
      }

      async function dropOut() {
        const userId = document.querySelector('[name="userId"]').value;
        const job = document.querySelector('[name="job"]').value;

        try {
          const response = await fetch("/api/roadmap/drop-out", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ userId, job }),
          });

          if (!response.ok) {
            throw new Error("Failed to drop out");
          }

          const result = await response.json();
          if (result.success) {
            window.location.href = `/recommendations/${userId}`;
          }
        } catch (error) {
          console.error("Error dropping out:", error);
          alert("Error dropping out. Please try again.");
        }
      }

      async function setGoal() {
    const targetMonths = document.getElementById('targetMonthsSelect').value;
    const userId = document.querySelector('[name="userId"]').value;

    try {
      const response = await fetch('/api/set-goal', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ userId, targetMonths })
      });

      if (!response.ok) throw new Error('Failed to set goal');
      
      const result = await response.json();
      if (result.success) {
        loadGoalProgress();
      }
    } catch (error) {
      console.error('Error setting goal:', error);
      alert('Error setting goal. Please try again.');
    }
  }

  async function loadGoalProgress() {
    const userId = document.querySelector('[name="userId"]').value;

    try {
      const response = await fetch(`/api/goal-progress/${userId}`);
      if (!response.ok) throw new Error('Failed to load goal progress');
      
      const data = await response.json();
      if (data.hasGoal) {
        document.getElementById('currentGoal').style.display = 'block';
        document.getElementById('targetMonths').textContent = data.targetMonths;
        document.getElementById('requiredHours').textContent = data.requiredHoursPerWeek;
        document.getElementById('progressPercent').textContent = data.progress;
        document.getElementById('progressBar').style.width = `${data.progress}%`;
      }
    } catch (error) {
      console.error('Error loading goal progress:', error);
    }
  }

  // Load goal progress when page loads
  document.addEventListener('DOMContentLoaded', loadGoalProgress);
    </script>
  </body>
</html>
